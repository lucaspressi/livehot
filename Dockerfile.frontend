# Multi-stage build para otimizar o tamanho da imagem
FROM node:18-alpine AS builder

# Instalar dependências necessárias para compilação nativa
RUN apk add --no-cache \
    python3 \
    make \
    g++ \
    libc6-compat

# Diretório de trabalho
WORKDIR /app

# Copiar arquivos de dependências primeiro (para melhor cache)
COPY frontend/package*.json ./

# Limpar cache do npm e instalar dependências
RUN npm cache clean --force && \
    npm install --no-audit --no-fund && \
    npm rebuild @rollup/rollup-linux-x64-musl --verbose || true && \
    npm cache clean --force

# Copiar código fonte
COPY frontend .

# Build da aplicação com configurações otimizadas
ENV NODE_ENV=production
ENV NODE_OPTIONS="--max-old-space-size=4096"
RUN npm run build

# Verificar se o build foi criado corretamente
RUN ls -la /app/build && \
    test -f /app/build/index.html || (echo "Build failed - index.html not found" && exit 1)

# ==========================================
# Estágio final - servidor nginx otimizado
# ==========================================
FROM nginx:1.25-alpine

# Instalar dumb-init para melhor gerenciamento de processos
RUN apk add --no-cache dumb-init

# Criar usuário não-root personalizado
RUN addgroup -g 1001 -S appuser && \
    adduser -S -D -H -u 1001 -h /var/cache/nginx -s /sbin/nologin -G appuser -g appuser appuser

# Remover configuração padrão do nginx
RUN rm -rf /usr/share/nginx/html/* && \
    rm /etc/nginx/conf.d/default.conf

# Copiar arquivos buildados
COPY --from=builder /app/build /usr/share/nginx/html

# Copiar configuração customizada do nginx
COPY nginx.conf /etc/nginx/nginx.conf
COPY default.conf /etc/nginx/conf.d/default.conf

# Copiar e preparar script de entrada
COPY docker-entrypoint.sh /docker-entrypoint.sh
RUN sed -i 's/\r$//' /docker-entrypoint.sh && \
    chmod +x /docker-entrypoint.sh && \
    chown appuser:appuser /docker-entrypoint.sh

# Criar diretórios necessários e definir permissões
RUN mkdir -p /var/cache/nginx/client_temp \
             /var/cache/nginx/proxy_temp \
             /var/cache/nginx/fastcgi_temp \
             /var/cache/nginx/uwsgi_temp \
             /var/cache/nginx/scgi_temp \
             /var/log/nginx \
             /var/run && \
    chown -R appuser:appuser /usr/share/nginx/html \
                             /var/cache/nginx \
                             /var/log/nginx \
                             /var/run \
                             /etc/nginx/conf.d && \
    chmod -R 755 /usr/share/nginx/html && \
    touch /var/run/nginx.pid && \
    chown appuser:appuser /var/run/nginx.pid

# Mudar para usuário não-root
USER appuser

# Expor porta
EXPOSE 80

# Usar dumb-init como PID 1
ENTRYPOINT ["/usr/bin/dumb-init", "--"]
CMD ["/docker-entrypoint.sh"]